# -*- coding: utf-8 -*-
"""Complete Engine.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g84wYbiLDrukurzRISSSOT5Hy0Ox15Oe
"""

!pip install gradio -q
import gradio as gr
import pandas as pd
import pickle

# Load your models and data (adjust paths)
with open('/content/drive/MyDrive/MRC/Divit HRC Disease Prediction.pkl', 'rb') as f:
    xgb_model = pickle.load(f)
with open('/content/drive/MyDrive/MRC/label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)
merged_df = pd.read_csv('/content/drive/MyDrive/MRC/disease_model.csv')
severity_df = pd.read_csv('/content/drive/MyDrive/MRC/Symptom-severity.csv')
symptoms = pd.read_csv('/content/drive/MyDrive/MRC/Training.csv').drop('prognosis', axis=1).columns.tolist()

def find_disease_by_symptoms(user_symptoms, merged_df, severity_df):
    disease_scores = {}
    for index, row in merged_df.iterrows():
        disease = row['Disease']
        symptoms = row['Symptoms']
        score = 0
        if isinstance(symptoms, str) and symptoms != "Not Available":
            try:
                symptom_list = eval(symptoms)
                for user_symptom in user_symptoms:
                    for s, severity in symptom_list:
                        if s == user_symptom:  # Corrected line
                            if isinstance(severity, (int, float)):
                                score += severity
                            else:
                                score += 1
            except (SyntaxError, NameError):
                return f"Error evaluating symptoms for {disease}: {symptoms}"
        elif isinstance(symptoms, str) and symptoms == "Not Available":
            continue
        else:
            return f"Unexpected symptom data type for {disease}: {type(symptoms)}"
        if score > 0:
            disease_scores[disease] = score
    ranked_diseases = sorted(disease_scores.items(), key=lambda x: x[1], reverse=True)
    return ranked_diseases

def predict_disease(user_symptoms, xgb_model, merged_df, severity_df, symptom_list, label_encoder, confidence_threshold=0.8):
    user_symptoms_encoded = pd.Series([1 if symptom in user_symptoms else 0 for symptom in symptom_list]).values.reshape(1, -1)
    probabilities = xgb_model.predict_proba(user_symptoms_encoded)[0]
    predicted_disease_encoded = probabilities.argmax()
    predicted_disease = label_encoder.inverse_transform([predicted_disease_encoded])[0]
    confidence = probabilities[predicted_disease_encoded]
    if confidence >= confidence_threshold:
        return [(predicted_disease, confidence)]
    else:
        results = find_disease_by_symptoms(user_symptoms, merged_df, severity_df)
        if results:
            max_score = results[0][1]
            normalized_results = [(disease, score / max_score) for disease, score in results]
            return normalized_results
        else:
            return []

def get_recommendations(disease_name):
    disease_data = merged_df[merged_df['Disease'] == disease_name].iloc[0]
    result = f"**Disease:** {disease_data['Disease']}\n\n**Description:** {disease_data['Description']}\n\n"
    symptoms_list = disease_data['Symptoms']
    if isinstance(symptoms_list, str) and symptoms_list != "Not Available":
        try:
            symptom_items = eval(symptoms_list)
            symptom_items = sorted(symptom_items, key=lambda x: x[1] if isinstance(x, tuple) and len(x) > 1 and isinstance(x[1], (int, float)) else 0, reverse=True)
            result += "**Symptoms:**\n"
            for item in symptom_items:
                if isinstance(item, tuple) and len(item) == 2:
                    symptom, severity = item
                    result += f"- {symptom.replace('_', ' ').title()} (Severity: {severity}/7)\n"
                else:
                    result += f"- Invalid symptom entry: {item}\n"
        except (SyntaxError, NameError):
            result += f"Error evaluating symptoms for {disease_name}: {symptoms_list}\n"
    else:
        result += "**Symptoms:** Not Available\n\n"

    # Format lists for better readability
    diet = eval(disease_data['Diet']) if isinstance(disease_data['Diet'], str) else []
    medications = eval(disease_data['Medication']) if isinstance(disease_data['Medication'], str) else []
    precautions = eval(disease_data['Precautions']) if isinstance(disease_data['Precautions'], str) else []

    result += "\n\n**Diet:**\n" + "\n".join(f"- {item}" for item in diet) + "\n\n"
    result += "**Medications:**\n" + "\n".join(f"- {item}" for item in medications) + "\n\n"
    result += "**Precautions:**\n" + "\n".join(f"- {item}" for item in precautions) + "\n\n"
    result += f"**Lifestyle Recommendations:** {disease_data['workout']}"

    return result

def predict_gradio(symptom_list):
    # Transform the input back to the original format
    original_symptom_list = [s.replace(' ', '_').lower() for s in symptom_list]
    predictions = predict_disease(original_symptom_list, xgb_model, merged_df, severity_df, symptoms, label_encoder)
    if predictions:
        top_3 = predictions[:3]  # Display top 3 diseases
        df = pd.DataFrame(top_3, columns=["Disease", "Confidence Score"])
        df["Confidence Score"] = (df["Confidence Score"] * 100).round(2).astype(str) + "%"
        df.index = df.index + 1
        return df
    else:
        return pd.DataFrame(columns=["Disease", "Confidence Score"])

def disease_info_gradio(disease_name):
    return get_recommendations(disease_name)

# Create the Gradio interface
with gr.Blocks(title="Health Insight Hub - by Divit Srivastava", theme=gr.themes.Soft()) as demo:
    gr.Markdown("""
    # Health Insight Hub - by Divit Srivastava
    Understand Your Symptoms And Find Healthcare Guidance.
    """)
    with gr.Tab("Symptom-Based Disease Prediction"):
        gr.Markdown("### Predict Diseases Based on Symptoms")
        formatted_symptoms = [s.replace('_', ' ').title() for s in symptoms]
        symptom_input = gr.CheckboxGroup(choices=formatted_symptoms, label="Select Symptoms to predict the disease")
        predict_button = gr.Button("Predict Disease", variant="primary")
        predict_output = gr.Dataframe(label="Predicted Diseases", value=pd.DataFrame(columns=["Disease", "Confidence Score"]))
        predict_button.click(fn=predict_gradio, inputs=symptom_input, outputs=predict_output)
    with gr.Tab("Disease Information Lookup"):
        gr.Markdown("### Learn More About a Disease")
        disease_input = gr.Dropdown(choices=merged_df['Disease'].unique().tolist(), label="Select Disease")
        info_button = gr.Button("Get Information", variant="primary")
        info_output = gr.Markdown(label="Disease Information")
        info_button.click(fn=disease_info_gradio, inputs=disease_input, outputs=info_output)

demo.launch()